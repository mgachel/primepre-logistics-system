"""
Django settings for primepre project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    'SECRET_KEY', 
    default='django-insecure-fdwfgv_359rpn$jj7=j24rtc=#3f)-0f7e=1r1fsz$v@#%h@ha'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Environment detection
ENVIRONMENT = config('ENVIRONMENT', default='development')

# Security settings for production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

ALLOWED_HOSTS = [
    "primepre-logistics-backend.herokuapp.com",
    "primepre-logistics-backend-fb2561752d16.herokuapp.com", 
    "primepre-backend.onrender.com",  # New Render backend URL
    "admin.primemade.org",
    "primemade.org",
    "www.primemade.org",
    "localhost",
    "127.0.0.1",
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Custom apps
    'users',
    'cargo',
    'GoodsRecieved',
    'rates',  
    'notes',
    'Shipments',
    'claims',  # Add claims app
    'settings',  # Add settings app
    'daily_updates',  # Add daily updates app
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # Add token blacklist support
    'rest_framework.authtoken',
    'django_filters',
    'corsheaders',  # Add CORS support
    'django_q',  # Background task processing
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'primepre.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'primepre.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL', default='sqlite:///db.sqlite3'),
        conn_max_age=600,
        # Only apply SSL settings for PostgreSQL, not SQLite
        conn_health_checks=True,
    )
}

# Apply SSL settings only for production PostgreSQL
if not DEBUG and 'postgresql' in DATABASES['default']['ENGINE']:
    DATABASES['default']['OPTIONS'] = {
        'sslmode': 'require',
    }



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



# Custom user model
AUTH_USER_MODEL = 'users.CustomerUser'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'users.authentication.PhoneBackend',  # Custom phone-based authentication
    'django.contrib.auth.backends.ModelBackend',  # Default backend (fallback)
]

# Login/Logout URLs for web authentication
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'

# Session configuration for signup wizard
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# ═══════════════════════════════════════════════════════════════
# TWILIO SMS CONFIGURATION WITH FAILSAFE
# ═══════════════════════════════════════════════════════════════
# 
# FAILSAFE PROTECTION:
# - Prevents app crash when Twilio env vars are missing
# - Disables SMS features gracefully in development
# - Logs warning instead of throwing exceptions
# 
TWILIO_ACCOUNT_SID = config('TWILIO_ACCOUNT_SID', default='')
TWILIO_AUTH_TOKEN = config('TWILIO_AUTH_TOKEN', default='')
TWILIO_PHONE_NUMBER = config('TWILIO_PHONE_NUMBER', default='')

# Check if Twilio is properly configured
if not all([TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER]):
    TWILIO_ENABLED = False
    import logging
    logging.getLogger(__name__).warning(
        "⚠️ Twilio not configured — SMS functionality disabled. "
        "Set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER to enable SMS."
    )
else:
    TWILIO_ENABLED = True
    import logging
    logging.getLogger(__name__).info(
        "✅ Twilio configured — SMS functionality enabled"
    )

# SMS Rate Limiting
SMS_RATE_LIMIT_PER_HOUR = 3
SMS_RATE_LIMIT_PER_DAY = 10

# Email configuration
EMAIL_BACKEND = config(
    'EMAIL_BACKEND', 
    default='django.core.mail.backends.console.EmailBackend'
)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='Primepre <no-reply@primepre.com>')

# Email settings for production
if not DEBUG:
    EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')


# FIXED: DRF Configuration with proper throttling rates and no Redis dependency
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ] + (['rest_framework.renderers.BrowsableAPIRenderer'] if DEBUG else []),
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'primepre.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    # FIXED: More reasonable throttle rates for production API
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/hour',  # Was: 100/day - too restrictive
        'user': '5000/hour'   # Was: 1000/day - too restrictive
    }
}

# JWT settings
# Increase token lifetimes so users are not logged out frequently.
# ACCESS_TOKEN_LIFETIME: how long an access token (short-lived) is valid before needing refresh.
# REFRESH_TOKEN_LIFETIME: how long a refresh token can be used to obtain new access tokens.
SIMPLE_JWT = {
    # In DEBUG keep a reasonably long access token for convenience; in production use multi-day access tokens
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7) if not DEBUG else timedelta(days=7),
    # Allow refresh tokens to be used for 30 days so users remain logged in across longer periods
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JTI_CLAIM': 'jti',
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',                                    
    
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(hours=12),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=30),
}

# CORS configuration
def csv_list(value: str) -> list:
    """Convert comma-separated string to list"""
    return [v.strip() for v in value.split(',') if v.strip()]

# CORS settings - Secure configuration
# In development it's convenient to allow all origins; in production default to False
# Use environment variable CORS_ALLOW_ALL_ORIGINS to override when needed
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=DEBUG, cast=bool)

# Specific allowed origins for production
CORS_ALLOWED_ORIGINS = csv_list(config(
    'CORS_ALLOWED_ORIGINS',
    default='https://primepre-frontend-ba6f55cc48e5.herokuapp.com,'
            'https://primepre-logistics-backend-fb2561752d16.herokuapp.com,'
            'https://primepre-backend.onrender.com,'
            'https://primepre-frontend.onrender.com,'
            'https://primepre-logistics-system.onrender.com,'
            "https://primemade.org,"
            "https://admin.primemade.org,"
            "https://www.primemade.org,"
            'http://localhost:3000,'
            'http://127.0.0.1:3000,'
            'http://localhost:5173,'
            'http://127.0.0.1:5173'
))

# Allow credentials for authentication
CORS_ALLOW_CREDENTIALS = True

# CORS headers and methods configuration
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding', 
    'accept-language',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-forwarded-for',
    'x-forwarded-proto',
    'cache-control',
    'pragma',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS', 
    'PATCH',
    'POST',
    'PUT',
]

# Cache preflight responses for 1 day
CORS_PREFLIGHT_MAX_AGE = 86400

# Additional CORS settings for robustness
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.herokuapp\.com$",
    r"^http://localhost:\d+$",
    r"^http://127\.0\.0\.1:\d+$",
]

# CSRF and Security Configuration
CSRF_TRUSTED_ORIGINS = csv_list(config(
    'CSRF_TRUSTED_ORIGINS',
    default='https://primepre-frontend-ba6f55cc48e5.herokuapp.com,'
            'https://primepre-logistics-backend-fb2561752d16.herokuapp.com,'
            'https://primepre-backend.onrender.com,'
            'https://primepre-frontend.onrender.com,'
            'https://primepre-logistics-system.onrender.com,'
            'https://admin.primemade.org,'
            'https://primemade.org,'
            'https://www.primemade.org,'
            'https://*.herokuapp.com,'
            'https://*.onrender.com'
))

# SSL and security headers for production
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = "None"
    CSRF_COOKIE_SAMESITE = "None"
    # Allow cookies to be shared across subdomains (primemade.org and admin.primemade.org)
    # NOTE: Only enable if you intentionally want session/csrf cookies shared across subdomains.
    SESSION_COOKIE_DOMAIN = ".primemade.org"
    CSRF_COOKIE_DOMAIN = ".primemade.org"

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['console'] + (['file'] if not DEBUG else []),
            'level': 'INFO',
            'propagate': False,
        },
        'users': {
            'handlers': ['console'] + (['file'] if not DEBUG else []),
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# FIXED: Cache configuration - Always use local memory cache (no Redis dependency)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Default primary key field type
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Request size limits for large Excel uploads
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB in bytes
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB in bytes
DATA_UPLOAD_MAX_NUMBER_FIELDS = 50000    # Allow many form fields for large uploads

# ═══════════════════════════════════════════════════════════════
# DJANGO Q2 CONFIGURATION (BACKGROUND TASKS)
# ═══════════════════════════════════════════════════════════════
# 
# SOLUTION FOR RENDER'S 60-100 SECOND TIMEOUT LIMIT:
# - Handles long-running tasks (Excel uploads) asynchronously
# - Uses PostgreSQL as queue (no Redis needed on free tier)
# - Prevents request timeout errors on large customer uploads
# 
Q_CLUSTER = {
    'name': 'primepre_tasks',
    'workers': 1,  # Single worker for Render free tier (512MB RAM)
    'timeout': 3600,  # 1 hour timeout for background tasks
    'retry': 3600,  # Retry failed tasks after 1 hour
    'queue_limit': 50,  # Max 50 tasks in queue (memory-safe)
    'bulk': 10,  # Process 10 tasks per batch
    'orm': 'default',  # Use PostgreSQL as queue (default database)
    'save_limit': 100,  # Keep last 100 task results
    'sync': False,  # Async mode (required for background processing)
    'catch_up': True,  # Process missed tasks on restart
}